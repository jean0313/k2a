package {{ .GCtx.Group }}.{{ .GCtx.PackageName }}.config;

import com.ai.tx.core.model.AbstractProducerEventConfig;
import com.ai.tx.core.util.AvroSerializer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

@Component("{{ .ChannelName | capitalize }}ProducerConfig")
public class {{ .ChannelName | capitalize }}ProducerConfig extends AbstractProducerEventConfig<ProducerFactory<String, String>> {
    @Value("${spring.kafka.bootstrap-servers}")
    private String kafkaBroker;

    @Override
    public ProducerFactory<String, String> getConfiguration() {
        Map<String, Object> props = new HashMap<>();
        props.put(ProducerConfig.BOOTSTRAP_SERVER_CONFIG, kafkaBroker);
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, AvroSerializer.class);
        return new DefaultKafkaProducerFactory<>(props);
    }
}